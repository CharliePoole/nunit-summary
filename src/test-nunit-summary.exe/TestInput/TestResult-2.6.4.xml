<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\Dev\NUnit\nunit-2.6\bin\Debug\tests\nunit.framework.tests.dll" total="1580" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2015-10-06" time="10:45:56">
  <environment nunit-version="2.6.4.0" clr-version="2.0.50727.5485" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\Dev\NUnit\nunit-2.6\bin\Debug" machine-name="CHARLIE-LAPTOP" user="charlie" user-domain="charlie-laptop" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\Dev\NUnit\nunit-2.6\bin\Debug\tests\nunit.framework.tests.dll" executed="True" result="Success" success="True" time="18.407" asserts="0">
    <results>
      <test-suite type="Namespace" name="NUnit" executed="True" result="Success" success="True" time="18.386" asserts="0">
        <results>
          <test-suite type="Namespace" name="Framework" executed="True" result="Success" success="True" time="18.384" asserts="0">
            <results>
              <test-suite type="Namespace" name="Constraints" executed="True" result="Success" success="True" time="12.821" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AllItemsTests" executed="True" result="Success" success="True" time="0.076" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingComparisonOfT" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingIComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRangeFailureMessage" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInstancesOfType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInstancesOfTypeFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreNotNullFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndConstraintTests" executed="True" result="Success" success="True" time="0.032" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AndConstraintTests.CanCombineTestsWithAndOperator" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AndConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AndConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndConstraintTests.FailsWithBadValues(37)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AndConstraintTests.FailsWithBadValues(53)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndConstraintTests.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AndConstraintTests.ProvidesProperFailureMessage(53,&quot;53&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndConstraintTests.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromConstraintTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.FailsWithBadValues(NUnit.Framework.Constraints.AssignableFromConstraintTests+D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.ProvidesProperFailureMessage(NUnit.Framework.Constraints.AssignableFromConstraintTests+D2,&quot;&lt;NUnit.Framework.Constraints.AssignableFromConstraintTests+D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.AssignableFromConstraintTests+D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AssignableFromConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.AssignableFromConstraintTests+B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToConstraintTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.FailsWithBadValues(NUnit.Framework.Constraints.AssignableToConstraintTests+B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.ProvidesProperFailureMessage(NUnit.Framework.Constraints.AssignableToConstraintTests+B,&quot;&lt;NUnit.Framework.Constraints.AssignableToConstraintTests+B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.AssignableToConstraintTests+D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AssignableToConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.AssignableToConstraintTests+D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeExistsConstraintTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.AttributeExistsOnMethodInfo" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.AttributeTestPropertyValueOnMethodInfo" description="my description" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.CanCombineAttributeConstraints" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.FailsWithBadValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.NonAttributeThrowsException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.D2,&quot;&lt;NUnit.Framework.Constraints.D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.AttributeExistsConstraintTest)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinarySerializableTest" executed="True" result="Success" success="True" time="0.032" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.BinarySerializableTest+InternalClass)" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.BinarySerializableTest+InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.BinarySerializableTest+InternalWithSerializableAttributeClass)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTests" executed="True" result="Success" success="True" time="0.028" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfArray" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfArrayList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfCollectionNotImplementingIList" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfSortedList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.ContainsWithRecursiveStructure" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.IgnoreCaseIsHonored" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedEqualityComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedEqualityComparerOfT" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.UsesProvidedLambdaExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionEquivalentTests" executed="True" result="Success" success="True" time="0.297" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EqualCollectionsAreEquivalent" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInActual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInExpected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentHonorsIgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentHonorsUsing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentIgnoresOrder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.FailureMessageWithHashSetAndArray" executed="True" result="Success" success="True" time="0.151" asserts="2" />
                      <test-suite type="ParameterizedTest" name="HonorsIgnoreCase" executed="True" result="Success" success="True" time="0.119" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Char[],System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.String[],System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Generic.Dictionary`2[System.Int32,System.String],System.Collections.Generic.Dictionary`2[System.Int32,System.String])" executed="True" result="Success" success="True" time="0.083" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Generic.Dictionary`2[System.Int32,System.Char],System.Collections.Generic.Dictionary`2[System.Int32,System.Char])" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Generic.Dictionary`2[System.String,System.Int32],System.Collections.Generic.Dictionary`2[System.String,System.Int32])" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Generic.Dictionary`2[System.Char,System.Int32],System.Collections.Generic.Dictionary`2[System.Char,System.Int32])" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Hashtable,System.Collections.Hashtable)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Hashtable,System.Collections.Hashtable)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Hashtable,System.Collections.Hashtable)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.HonorsIgnoreCase(System.Collections.Hashtable,System.Collections.Hashtable)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.WorksWithArrayAndHashSet" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.WorksWithCollectionsOfArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.WorksWithHashSetAndArray" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.WorksWithHashSets" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTests" executed="True" result="Success" success="True" time="0.083" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Allows_adjacent_equal_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_AtLeastOneArgMustImplementIComparable" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_custom_comparison" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_custom_comparison2" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_TypesMustBeComparable" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy_Comparer" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy_Handles_heterogeneous_classes_as_long_as_the_property_is_of_same_type" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedDescending" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedDescending_2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DelayedConstraintTest" executed="True" result="Success" success="True" time="9.419" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.CanTestContentsOfDelegateReturningList" executed="True" result="Success" success="True" time="0.157" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.CanTestContentsOfList" executed="True" result="Success" success="True" time="0.102" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.CanTestContentsOfRefList" executed="True" result="Success" success="True" time="0.105" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.CanTestInitiallyNullDelegate" executed="True" result="Success" success="True" time="1.101" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.CanTestInitiallyNullReference" executed="True" result="Success" success="True" time="1.101" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadDelegates" executed="True" result="Success" success="True" time="1.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate`1[System.Object])" executed="True" result="Success" success="True" time="0.501" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate`1[System.Object])" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="1.503" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.FailsWithBadValues(0)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="1.503" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ProvidesProperFailureMessage(0,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.SimpleTest" executed="True" result="Success" success="True" time="0.602" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.SimpleTestBoolDelegate" executed="True" result="Success" success="True" time="0.602" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.SimpleTestUsingReference" executed="True" result="Success" success="True" time="0.603" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodDelegates" executed="True" result="Success" success="True" time="0.503" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.SucceedsWithGoodDelegates(NUnit.Framework.Constraints.ActualValueDelegate`1[System.Object])" executed="True" result="Success" success="True" time="0.501" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.501" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ThatOverload_DoesNotAcceptNegativeDelayValues" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ThatOverload_DoesNotAcceptNegativeDelayValues_IntDelegate" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ThatOverload_ZeroDelayIsAllowed" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.DelayedConstraintTest.ThatOverload_ZeroDelayIsAllowed_IntDelegate" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyConstraintTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(System.Object[],&quot;&lt; 1, 2, 3 &gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.Generic.List`1[System.Int32])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest" executed="True" result="Success" success="True" time="0.019" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EndsWithTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EndsWithTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTestIgnoringCase" executed="True" result="Success" success="True" time="0.018" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;I said Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualConstraintTests" executed="True" result="Success" success="True" time="0.247" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDates" executed="True" result="Success" success="True" time="0.049" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinDays" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinHours" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMilliseconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMinutes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinSeconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTicks" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTimeSpan" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_DifferentOrder" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_Failure" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_SameOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="CanMatchDoublesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10000.0d)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(9500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchDoublesWithUlpTolerance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_DifferentOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_Failure" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_SameOrder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtableWithDictionary" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="CanMatchSinglesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10500.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(9500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10000.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchSinglesWithUlpTolerance" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchSpecialFloatingPointValues" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchTimeSpanWithinMinutes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchUsingIsEqualToWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfDaysPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfHoursPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMillisecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMinutesPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfPercentPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfSecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfTicksPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnDecimal" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ErrorIfUlpsIsUsedOnIntegralType" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000UL,1010UL)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000L,1010L)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsPrecedesWithin" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithPercentAndUlpsToleranceModes" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithUlpsAndPercentToleranceModes" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(8500.0d)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(11500.0d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(8500.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(11500.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.NaN,&quot;NaN&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0000m)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedArrayComparer" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparerOfT" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_IntArgs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_StringArgs" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedListComparer" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualConstraintTests+DateTimeOffSetEquality" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDates" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinDays" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMilliseconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMinutes" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinSeconds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTicks" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchUsingIsEqualToWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.DTimeOffsetCanMatchDatesWithinHours" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualityComparerTests" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.CanCompareArrayContainingSelfToSelf" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.CrossReferencingRecursiveEnumerablesAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenActualImplementsIEquatable" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenExpectedImplementsIEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableHasPrecedenceOverDefaultEquals" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableSuccess" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.RecursionCheckDoesNotRelyOnValueEquality" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.ReferenceEqualityHasPrecedenceOverIEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualityComparerTests.SelfContainingRecursiveEnumerablesAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualTest.FailedStringMatchShowsFailurePosition" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncated" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtBothEndsIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtFrontEndIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.TestPropertyWithPrivateSetter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactCountConstraintTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ExactlyOneItemMatches" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ExactlyOneItemMatchFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ExactlyTwoItemsMatch" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ExactlyTwoItemsMatchFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ZeroItemsMatch" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.ExactCountConstraintTests.ZeroItemsMatchFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeConstraintTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.FailsWithBadValues(NUnit.Framework.Constraints.ExactTypeConstraintTests+B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.FailsWithBadValues(NUnit.Framework.Constraints.ExactTypeConstraintTests+D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.ProvidesProperFailureMessage(NUnit.Framework.Constraints.ExactTypeConstraintTests+B,&quot;&lt;NUnit.Framework.Constraints.ExactTypeConstraintTests+B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.ProvidesProperFailureMessage(NUnit.Framework.Constraints.ExactTypeConstraintTests+D2,&quot;&lt;NUnit.Framework.Constraints.ExactTypeConstraintTests+D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.ExactTypeConstraintTests+D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FalseConstraintTest" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FloatingPointNumericsTest" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.DoubleEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.FloatEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredDoubleReinterpretation" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredFloatReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredIntegerReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredLongReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanConstraintTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.CanCompareIComparables" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ComparisonConstraintTest.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.SucceedsWithGoodValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanConstraintTests.SucceedsWithGoodValues(5.001d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanOrEqualConstraintTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.CanCompareIComparables" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.SucceedsWithGoodValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualConstraintTests.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeConstraintTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.FailsWithBadValues(NUnit.Framework.Constraints.InstanceOfTypeConstraintTests+B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.ProvidesProperFailureMessage(NUnit.Framework.Constraints.InstanceOfTypeConstraintTests+B,&quot;&lt;NUnit.Framework.Constraints.InstanceOfTypeConstraintTests+B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.InstanceOfTypeConstraintTests+D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeConstraintTests.SucceedsWithGoodValues(NUnit.Framework.Constraints.InstanceOfTypeConstraintTests+D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanConstraintTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.CanCompareIComparables" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ComparisonConstraintTest.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.FailsWithBadValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanConstraintTests.SucceedsWithGoodValues(4.999d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanOrEqualConstraintTests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.CanCompareIComparables" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ComparisonConstraintTest.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.FailsWithBadValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualConstraintTests.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsgUtilTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsDoNotFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringTailsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="EscapeControlCharsTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r&quot;,&quot;\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n\n&quot;,&quot;\\n\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r&quot;,&quot;\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n&quot;,&quot;\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r\r&quot;,&quot;\\r\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\n&quot;,&quot;\\r\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\r&quot;,&quot;\\n\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;This is a\rtest message&quot;,&quot;This is a\\rtest message&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t&quot;,&quot;\\t&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t\n&quot;,&quot;\\t\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\\r\\n&quot;,&quot;\\\\r\\\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\a&quot;,&quot;\\a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\b&quot;,&quot;\\b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\f&quot;,&quot;\\f&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\v&quot;,&quot;\\v&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x0085&quot;,&quot;\\x0085&quot;)" description="Next line character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2028&quot;,&quot;\\x2028&quot;)" description="Line separator character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2029&quot;,&quot;\\x2029&quot;)" description="Paragraph separator character" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n&quot;,&quot;\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestClipString" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.NoClippingNeeded" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStartAndEnd" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtEnd" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStart" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NaNConstraintTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(42,&quot;42&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotConstraintTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.CanUseNotOperator" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotConstraintTests.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.NotHonorsIgnoreCaseUsingConstructors" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.NotHonorsIgnoreCaseUsingPrefixNotation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotConstraintTests.NotHonorsTolerance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotConstraintTests.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotConstraintTests.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NotConstraintTests.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullConstraintTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullOrEmptyStringConstraintTest" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NumericsTest" executed="True" result="Success" success="True" time="0.041" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithoutToleranceMode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithPercentage" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                      <test-suite type="ParameterizedTest" name="CanMatchIntegralsWithPercentage" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500UL)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchWithoutToleranceMode" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.568f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.5678d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalAbovePercentage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalBelowPercentage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsOnIntegralsOutsideOfPercentage" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NUnitComparerTests" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="EqualItems" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0d,4)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4,4)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0d,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0f,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0d,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0f,4)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(4.0f,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.EqualItems(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SpecialFloatingPointValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.SpecialFloatingPointValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="UnequalItems" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0d,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0f,2)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4,null)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4,null)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4,2)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0f,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0f,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0d,2)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Constraints.NUnitComparerTests.UnequalItems(4.0d,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrConstraintTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.OrConstraintTests.CanCombineTestsWithOrOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.OrConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.OrConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrConstraintTests.FailsWithBadValues(37)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrConstraintTests.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrConstraintTests.SucceedsWithGoodValues(99)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.OrConstraintTests.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PredicateConstraintTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(-5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Int32)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(42,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Collections.ArrayList,&quot;&lt;System.Collections.ArrayList&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Int32,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Array)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(42)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.PropertyEqualToValueWithTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(System.Int32[],&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;7&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RangeConstraintTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.FailsWithBadValues(43)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.ProvidesProperFailureMessage(43,&quot;43&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.ShouldThrowExceptionIfFromIsLessThanTo" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.SucceedsWithGoodValues(23)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTests.UsesProvidedLambda" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReusableConstraintTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanCreateReusableConstraintByImplicitConversion" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-suite type="Theory" name="CanReuseReusableConstraintMultipleTimes" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;empty&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;null&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;property Length &lt;greaterthan 3&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;and &lt;property Length &lt;equal 4&gt;&gt; &lt;startswith &quot;te&quot;&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SameAsTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(System.Object,&quot;&lt;System.Object&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(3,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.SucceedsWithGoodValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_Linux" executed="True" result="Success" success="True" time="0.017" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_Windows" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_Linux" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder2/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;//folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/Folder1/File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./folder2/../File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder2/file.tmp&quot;,&quot;\&quot;/folder2/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;folder1/file.tmp&quot;,&quot;\&quot;folder1/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;//folder1/file.tmp&quot;,&quot;\&quot;//folder1/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../file.temp&quot;,&quot;\&quot;/folder1/./folder2/../file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/File.TMP&quot;,&quot;\&quot;/Folder1/File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./folder2/../File.TMP&quot;,&quot;\&quot;/FOLDER1/./folder2/../File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.RootPathEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_Windows" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder2\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder2\\file.tmp&quot;,&quot;\&quot;C:\\folder2\\file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.RootPathEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\..\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\folder2\\..\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.StartsWithTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.StartsWithTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;HELLO THERE&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;HELLO THERE&quot;,&quot;\&quot;HELLO THERE\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTestIgnoringCase" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;say Hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say Hello to fred&quot;,&quot;\&quot;say Hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubPathTest_Linux" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder2&quot;,&quot;\&quot;/folder1/folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2&quot;,&quot;\&quot;/folder1/./folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/junk/../folder2&quot;,&quot;\&quot;/folder1/junk/../folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;\\folder1\\folder2&quot;,&quot;\&quot;\\folder1\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SubPathOfRoot" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubPathTest_Windows" executed="True" result="Success" success="True" time="0.018" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder2&quot;,&quot;\&quot;C:\\folder1\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\Folder1\\Folder2&quot;,&quot;\&quot;C:\\Folder1\\Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\junk\\..\\folder2&quot;,&quot;\&quot;C:\\folder1\\junk\\..\\folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;,&quot;\&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:/folder1/folder2&quot;,&quot;\&quot;C:/folder1/folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SubPathOfRoot" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubstringTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubstringTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;HELLO&quot;,&quot;\&quot;HELLO\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTestIgnoringCase" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;HellO there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;I said HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_ExactType" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_InstanceOfType" executed="True" result="Success" success="True" time="0.024" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ArgumentException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_WithConstraint" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ToStringTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplayPrefixConstraints_Resolved" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Resolved" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Unresolved" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_Resolved" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_UnResolved" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayPrefixConstraints_Unresolved" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TrueConstraintTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlSerializableTest" executed="True" result="Success" success="True" time="1.821" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.813" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(System.Collections.Generic.Dictionary`2[System.String,System.String])" executed="True" result="Success" success="True" time="0.544" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.XmlSerializableTest+InternalClass)" executed="True" result="Success" success="True" time="0.242" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.XmlSerializableTest+InternalWithSerializableAttributeClass)" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.055" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(System.Collections.Generic.Dictionary`2[System.String,System.String],&quot;&lt;Dictionary`2&gt;&quot;)" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.XmlSerializableTest+InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.XmlSerializableTest+InternalWithSerializableAttributeClass,&quot;&lt;InternalWithSerializableAttributeClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.945" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(1)" executed="True" result="Success" success="True" time="0.051" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.889" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Syntax" executed="True" result="Success" success="True" time="4.223" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AfterSyntaxUsingActualPassedByRef" executed="True" result="Success" success="True" time="1.417" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.EqualToTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.GreaterTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.HasMemberTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.NullTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.SameAsTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TextTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TrueTest" executed="True" result="Success" success="True" time="0.200" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterSyntaxUsingAnonymousDelegates" executed="True" result="Success" success="True" time="1.522" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.EqualToTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.GreaterTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.HasMemberTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.NullTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.SameAsTest" executed="True" result="Success" success="True" time="0.202" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TextTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.ThrowsTest" executed="True" result="Success" success="True" time="0.103" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TrueTest" executed="True" result="Success" success="True" time="0.201" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_AndOperator" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_ProperyTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_SimpleConstraint" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AllTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndIsEvaluatedBeforeFollowingOr" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndIsEvaluatedBeforePrecedingOr" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndOperatorOverride" description="Test" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineConstraintAndResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineResolvableConstraintExpressionAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineTwoResolvableConstraintExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndTest_ThreeAndsWithNot" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArbitraryConstraintMatching" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.ApplyMatchesToProperty" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintAfterPrefix" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintsUnderAndOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchLambda" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchPredicate" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromTest_Generic" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToTest_Generic" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AtLeastTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AtMostTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTest_Generic" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTestWithFollowingConstraint" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinarySerializableTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTest_Comparer" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalled" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalledInExpression" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTest_Comparer_String" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalled" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalledInExpression" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTest_String" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionEquivalentTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionMemberTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionMemberTest_Comparer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Descending" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionSubsetTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CountTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualityTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsUsingDefaultFloatingPointTolerance" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixedFloatAndDouble" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixingTypesGenerally" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.SimpleEqualityTests" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest_WithinTolerance" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FalseTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanOrEqualTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTest_Generic" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeTest_Generic" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InvalidCodeTests" executed="True" result="Success" success="True" time="0.789" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="CodeShouldNotCompile" executed="True" result="Success" success="True" time="0.519" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.And.Throws&quot;)" executed="True" result="Success" success="True" time="0.133" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.Not&quot;)" executed="True" result="Success" success="True" time="0.055" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Not.Null.GreaterThan(10))&quot;)" executed="True" result="Success" success="True" time="0.118" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.All&quot;)" executed="True" result="Success" success="True" time="0.069" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.And&quot;)" executed="True" result="Success" success="True" time="0.082" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.All.And.And&quot;)" executed="True" result="Success" success="True" time="0.057" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CodeShouldNotCompileAsFinishedConstraint" executed="True" result="Success" success="True" time="0.269" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All.Not&quot;)" executed="True" result="Success" success="True" time="0.091" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not&quot;)" executed="True" result="Success" success="True" time="0.058" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All&quot;)" executed="True" result="Success" success="True" time="0.059" asserts="0" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not.All&quot;)" executed="True" result="Success" success="True" time="0.058" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LengthTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanOrEqualTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MessageTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MixedOperatorOverrides" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.MixedOperatorOverrides.ComplexTests" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NaNTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NegativeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoneTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotOperatorOverride" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.NotOperatorCanApplyToResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTest_Cascaded" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OperatorPrecedenceTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.SomeTests" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.WithTests" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrOperatorOverride" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineConstraintAndResolvableConstraintExpression" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineResolvableConstraintExpressionAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineTwoResolvableConstraintExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrTest_ThreeOrs" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PositiveTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest_AndFollows" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertySyntaxVariations" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.ExistenceTest" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.SeparateConstraintTest" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest_ConstraintFollows" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest_NotFollows" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegexTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegexTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_BeforeBinaryOperators" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_NestedSome" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_UseOfAndSome" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest_IgnoreCase" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextContains" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextEndsWithTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextMatchesTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextStartsWithTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsTests" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.DelegateThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsExceptionWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInvalidOperationException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTargetInvocationExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeofWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TrueTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UniqueTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlSerializableTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="1.170" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ArrayEqualsFailureMessageFixture" executed="True" result="Success" success="True" time="0.065" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ActualArrayIsLonger" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArrayAndCollection_Failure" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysHaveDifferentRanks" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentDimensionsAsCollection" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentRanksAsCollection" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DifferentArrayTypesEqualFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ExpectedArrayIsLonger" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FailureOnSingleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrayComparedToSimpleArray" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArrayEqualsFixture" executed="True" result="Success" success="True" time="0.025" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayAndCollection" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayIsEqualToItself" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayOfIntAndArrayOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfArrays" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDecimal" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfInt" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfMixedTypes" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfString" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysPassedAsObjects" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentDimensionsMatchedAsCollection" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentRanksComparedAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArrayNotEqualFixture" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.DifferentLengthArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssertThrowsTests" executed="True" result="Success" success="True" time="0.128" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.BaseExceptionThrown" executed="True" result="Success" success="True" time="0.093" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfDerivedType" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfExactType" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchUnspecifiedException" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionIsReturnedToMethod" executed="True" result="Success" success="True" time="0.003" asserts="16" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionThrown" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DerivedExceptionThrown" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowFails" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowSuceeds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.NoExceptionThrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.UnrelatedExceptionThrown" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssumeThatTests" executed="True" result="Success" success="True" time="0.037" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionAssertTest" executed="True" result="Success" success="True" time="0.081" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFail" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFailCount" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyICollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyIList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ILIst" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EnsureComparerIsUsed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Equivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailOne" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailTwo" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Allows_adjacent_equal_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_ContainedTypesMustBeCompatible" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_null" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_TypesMustImplementIComparable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNullFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfTypeFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent_Fails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithObjects" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithStrings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure_WithTwoNulls" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConditionAssertTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyArray" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyIEnumerable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNullString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalseFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaN" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaNFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmpty" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArray" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArrayList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyHashTable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyIEnumerable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyString" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrueFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DirectoryAssertTests" executed="True" result="Success" success="True" time="0.208" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneIsNull" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithDirectoryInfos" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithDirectoryInfo" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinThrowsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithDirectoryInfo" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithStringPath" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithTempPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinThrowsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualsFixture" executed="True" result="Success" success="True" time="0.048" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Bug575936Int32Int64Comparison" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Byte" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Decimal" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEquality" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEqualityIgnoresTrailingDirectorySeparator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysAllDigits" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysDefaultTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualWithNanDoesNotDisplayDefaultTolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsNotEqual" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Equals" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsFail" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNaNFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsSameTypes" executed="True" result="Success" success="True" time="0.014" asserts="31" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsThrowsException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Float" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysAllDigits" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysTolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_ConstraintSyntax" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_OldSyntax" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Int" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerEquals" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerLongComparison" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsNaNSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.NegInfinityEqualsInfinity" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityEqualsInfinity" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEquals" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEqualsNegInfinity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.ReferenceEqualsThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.Short" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.SinglePosInfinityNotEqualsNegInfinity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.String" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.EqualsFixture.UInt" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FileAssertTests" executed="True" result="Success" success="True" time="0.098" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWhenOneIsNull" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFileInfos" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFiles" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithStreams" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithTextFilesAfterReadingBothFiles" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesUsingSameFileTwice" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithEqualStreams" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFileInfos" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFiles" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithSameStream" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithTextFiles" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFileInfos" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFiles" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithStreams" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFile" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFileAndFails" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFileInfos" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFiles" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithStreams" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.NonReadableStreamGivesException" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.FileAssertTests.NonSeekableStreamGivesException" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterEqualFixture" executed="True" result="Success" success="True" time="0.249" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Decimal" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Double" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Float" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Int32" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Long" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_UInt32" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_ULong" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.MixedTypes" executed="True" result="Success" success="True" time="0.003" asserts="42" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterEqualIComparable" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterOrEqual" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterFixture" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.Greater" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.MixedTypes" executed="True" result="Success" success="True" time="0.002" asserts="42" />
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreater" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterWhenEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessEqualFixture" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.LessEqualFixture.FailureMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.LessEqualFixture.LessOrEqual" executed="True" result="Success" success="True" time="0.003" asserts="42" />
                      <test-case name="NUnit.Framework.Tests.LessEqualFixture.MixedTypes" executed="True" result="Success" success="True" time="0.001" asserts="42" />
                      <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessEqualIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessOrEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessFixture" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.LessFixture.FailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.LessFixture.Less" executed="True" result="Success" success="True" time="0.002" asserts="18" />
                      <test-case name="NUnit.Framework.Tests.LessFixture.MixedTypes" executed="True" result="Success" success="True" time="0.001" asserts="42" />
                      <test-case name="NUnit.Framework.Tests.LessFixture.NotLess" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.LessFixture.NotLessIComparable" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.LessFixture.NotLessWhenEqual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ListContentsTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.ArraySucceeds" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.DifferentTypesMayBeEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.EmptyArrayFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ListContentsTests.NullArrayIsError" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotEqualFixture" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqualFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualSameTypes" executed="True" result="Success" success="True" time="0.001" asserts="21" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullEqualsNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullNotEqualToNonNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.NotEqualFixture.UInt" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSameFixture" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSameFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullableTypesTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <categories>
                      <category name="Generics" />
                    </categories>
                    <results>
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableEnums" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableMixedNumerics" executed="True" result="Success" success="True" time="0.002" asserts="36" />
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableStructs" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareWithTolerance" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNaN" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNull" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RandomizerTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomDoublesAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomIntsAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithDifferentSeedsReturnDifferentValues" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithSameSeedsReturnSameValues" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomSeedsAreUnique" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsDifferentRandomizersForDifferentMethods" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForDifferentParametersOfSameMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameMethod" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameParameter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RangeTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.RangeTests.InRangeFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.RangeTests.InRangeSucceeds" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeSucceeds" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-suite type="ParameterizedTest" name="RangeBoundaryConditions" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(10,9,10)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,9)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Tests.RangeTests.ShouldThrowExceptionIfFromIsLessThanTo" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SameFixture" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.SameFixture.Same" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.SameFixture.SameFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.SameFixture.SameValueTypes" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringAssertTests" executed="True" result="Success" success="True" time="0.017" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompare" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompareFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.Contains" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.ContainsFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DifferentEncodingsOfSameStringAreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContainFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWith" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWithFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWith" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWithFails" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWith" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWithFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatch" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatchFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWith" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWithFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestFixtureAttributeTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithCombinedArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                        <categories>
                          <category name="Generics" />
                        </categories>
                      </test-case>
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgs" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgsAndSetTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                        <categories>
                          <category name="Generics" />
                        </categories>
                      </test-case>
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithJustTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                        <categories>
                          <category name="Generics" />
                        </categories>
                      </test-case>
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithNoArgumentsAndSetTypeArgs" executed="True" result="Success" success="True" time="0.000" asserts="2">
                        <categories>
                          <category name="Generics" />
                        </categories>
                      </test-case>
                      <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithoutArguments" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextMessageWriterTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.ConnectorIsWrittenWithSurroundingSpaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DateTimeTest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenToTwentyNineDigits" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenWithTrailingM" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences_NoClipping" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenToSeventeenDigits" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenWithTrailingD" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenToNineDigits" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenWithTrailingF" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.IntegerIsWrittenAsIs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.PredicateIsWrittenWithTrailingSpace" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.StringIsWrittenWithQuotes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeAssertTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactTypeFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFrom" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFromFails" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOf" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOfFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFrom" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFromFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOf" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOfFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ValuesAttributeTests" executed="True" result="Success" success="True" time="0.041" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="CanConverDoubleToDecimal" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConverDoubleToDecimal(12.5m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertDoubleRangeToDecimal" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.2m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.3m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertIntRangeToByte" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertIntRangeToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(1m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(2m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(3m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertIntRangeToSByte" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertIntRangeToShort" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertIntToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntToDecimal(12m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertRandomDoubleToDecimal" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(4.70040703271535m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(8.88255674200252m)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(3.60711565036658m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertRandomIntToByte" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(8)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(8)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(8)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertRandomIntToDecimal" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(2m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(7m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(9m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertRandomIntToSByte" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(8)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertRandomIntToShort" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(3)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToByte" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToByte(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToSByte" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToSByte(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertSmallIntsToShort" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToShort(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanConvertStringToDecimal" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertStringToDecimal(12.5m)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithDoubleRangeAndStep" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithFloatRangeAndStep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRange" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRangeAndStep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithLongRangeAndStep" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.ValuesAttributeProvidesSpecifiedValues" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>